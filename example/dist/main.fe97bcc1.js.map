{"version":3,"sources":["../index.js","src/main.js"],"names":["imageBlurProcessing","src","size","rect","reverse","canvas","document","createElement","context","getContext","image","Image","name_ext","match","ext","substring","lastIndexOf","length","type","startTime","Date","now","Promise","resolve","reject","onload","blurStartX","left","blurStartY","top","blurWidth","width","blurHeight","height","blurEndX","blurEndY","drawImage","imageData","getImageData","newImageData","w","data","forEach","_","i","y","parseInt","x","rgba","count","nx","ny","num","putImageData","base64","toDataURL","endTime","console","log","onerror","e","imageBlurProcessing2","matrix","row","info","v","push","pixels","objX","neighbors","c","val","require","Vue","el","beforeImage","afterImage","processTime","isProcessing","crop","mounted","created","methods","change","coordinates","blur","options","setTimeout","then","res","bind","onFileChang","reader","FileReader","addEventListener","event","target","result","error","readAsDataURL","files"],"mappings":"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","file":"main.fe97bcc1.js","sourceRoot":"..","sourcesContent":["export function imageBlurProcessing(src,{size = 1,rect = null,reverse=false}) {\n  const canvas = document.createElement(\"canvas\")\n  const context = canvas.getContext('2d')\n  const image = new Image()\n  const name_ext = src.match(\".+/(.+?)([\\?#;].*)?$\")[1];\n  let ext = name_ext.substring(name_ext.lastIndexOf('.') + 1,name_ext.length);\n  if(ext == 'jpg')ext = 'jpeg' // なんか image/jpg　でbase64化すると image/png　になってしまう。\n  const type = `images/${ext}`\n  image.src = src\n  let startTime = Date.now(); // 開始時間\n\n\n  return new Promise((resolve, reject) => {\n  \n    image.onload = () => {\n\n      let blurStartX = (rect)?rect.left: 0\n      let blurStartY = (rect)?rect.top:0\n      let blurWidth = (rect)?rect.width: image.width\n      let blurHeight = (rect)?rect.height: image.height\n      let blurEndX = blurStartX + blurWidth\n      let blurEndY = blurStartY + blurHeight\n\n      canvas.height = image.height\n      canvas.width = image.width\n      context.drawImage(image, 0, 0)\n      \n      const imageData = context.getImageData(0, 0, image.width, image.height)\n      let newImageData = context.getImageData(0, 0, image.width, image.height);\n      const w = image.width * 4\n\n      imageData.data.forEach((_, i) => {\n        if(i % 4 == 0){\n          const y = parseInt(i / w)\n          const x = (i % (w)) / 4;\n          if ((y > blurStartY && y < blurEndY && x > blurStartX && x < blurEndX) != reverse){\n            let rgba = [0,0,0,0]\n            let count = 0\n            for (let nx = x - size;nx < x + size + 1;nx++){\n              for (let ny = y - size;ny < y + size + 1;ny++){\n                const num = (nx * 4) + (ny * w)\n                if(num > 0 && num < imageData.data.length){\n                  rgba[0] += imageData.data[num]\n                  rgba[1] += imageData.data[num + 1]\n                  rgba[2] += imageData.data[num + 2]\n                  rgba[3] += imageData.data[num + 3]\n                  count++\n                }\n              }\n            }  \n            newImageData.data[i] = rgba[0] / count\n            newImageData.data[i + 1] = rgba[1] / count\n            newImageData.data[i + 2] = rgba[2] / count\n            newImageData.data[i + 3] = rgba[3] / count           \n          } else {\n            newImageData.data[i] = imageData.data[i]\n            newImageData.data[i + 1] = imageData.data[i + 1]\n            newImageData.data[i + 2] = imageData.data[i + 2]\n            newImageData.data[i + 3] = imageData.data[i + 3]\n          }  \n        }\n      })\n\n      context.putImageData(newImageData,0,0)\n      const base64 = canvas.toDataURL(type);\n      const endTime = new Date()\n      console.log(\"処理時間\")\n      console.log(endTime - startTime); \n      resolve(base64)\n    };\n    image.onerror = (e) => reject(e)\n  });\n\n}\n\nexport function imageBlurProcessing2(src, size = 60) {\n\n  const canvas = document.createElement(\"canvas\")\n  const context = canvas.getContext('2d')\n  const image = new Image()\n  const name_ext = src.match(\".+/(.+?)([\\?#;].*)?$\")[1];\n  let ext = name_ext.substring(name_ext.lastIndexOf('.') + 1,name_ext.length);\n  if(ext == 'jpg')ext = 'jpeg' // なんか image/jpg　でbase64化すると image/png　になってしまう。\n  const type = `images/${ext}`\n  image.src = src\n\n  let blurStartX = 10\n  let blurStartY =  20\n  let blurWidth = 500\n  let blurHeight = 120\n  let blurEndX = blurStartX + blurWidth\n  let blurEndY = blurStartY + blurHeight\n\n  return new Promise((resolve, reject) => {\n  \n    image.onload = () => {\n      canvas.height = image.height\n      canvas.width = image.width\n      context.drawImage(image, 0, 0)\n      \n      const imageData = context.getImageData(0, 0, image.width, image.height)\n      let matrix = []\n      let row = []\n      let rgba = []\n      let startTime = Date.now(); // 開始時間\n      startTime = Date.now()\n      console.info(\"ImageDataを二次元配列化\")\n      imageData.data.forEach((v, i) => {\n        rgba.push(v)\n        if(i % 4 == 3 ){\n          row.push(rgba)\n          rgba = []\n        }\n        if(i % (image.width * 4) == (image.width * 4)  -1 ){\n          matrix.push(row)\n          row = []\n        } \n      })\n\n      var newImageData = context.getImageData(0, 0, image.width, image.height);\n      let pixels = []\n\n      let endTime = Date.now(); // 終了時間\n      console.log(endTime - startTime); \n      console.log(\"ぼかし処理\")\n      startTime = Date.now()      \n      matrix.forEach((objX, x) => {\n\n        objX.forEach((_, y) => {\n          if (y > blurStartX && y < blurEndX && x > blurStartY && x < blurEndY){\n            let neighbors = []\n            for (let nx = x - size;nx < x + size + 1;nx++){\n              for (let ny = y - size;ny < y + size + 1;ny++){\n                  if (ny > -1 && nx >  -1 && nx < image.width  && ny < image.height){\n                    neighbors.push(matrix[nx][ny])\n                }\n              }\n            }\n\n            for(let c = 0; c < 4; c++){\n              let val = 0\n              for(let i = 0; i < neighbors.length; i++){\n                val += neighbors[i][c]\n              }\n              pixels.push(val / neighbors.length)\n              //newImageData.data[((x * image.width) + y )  + c] = val / neighbors.length\n            }  \n\n          } else {\n            for(let c = 0; c < 4; c++){\n               pixels.push(matrix[x][y][c])\n              //newImageData.data[((x * image.width) + y )  + c] = matrix[x][y][c]\n            }\n          }\n     \n        })\n       \n      });\n      endTime = Date.now(); // 終了時間\n      console.log(endTime - startTime);  \n\n      startTime = Date.now()\n      console.info(\"ImageDataを挿入\")\n      pixels.forEach((v, i) =>{\n        newImageData.data[i] = v\n      })\n      console.log(endTime - startTime); \n\n      startTime = Date.now()\n      console.info(\"ImageDataを挿入\")\n      context.putImageData(newImageData,0,0)\n      const base64 = canvas.toDataURL(type);\n      resolve(base64)\n    };\n    image.onerror = (e) => reject(e)\n  });\n}","import { imageBlurProcessing } from '../../index';\nlet image = require('./../assets/images/001.jpg');  \nnew Vue({\n  el: \"#app\",\n\n  data() {\n     \n    return {\n      beforeImage: `./${image}`,\n      afterImage:null,\n      processTime:0,\n      isProcessing:false,\n      size: 20,\n      reverse: false,\n      count: 0,\n      crop : {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      }\n    }\n  },\n\n \n  mounted() {\n\n \n  },\n  created() {\n    console.log(image)\n \n\n  },\n  methods:{\n    change({coordinates, canvas}) {\n      this.crop= coordinates\n    },    \n    blur: function(){\n      this.afterImage = null\n      this.isProcessing = true\n      let startTime = new Date()\n      let src = this.beforeImage\n      let options = {\n        size: parseInt(this.size),\n        rect: this.crop,\n        reverse: this.reverse,\n      }\n\n      setTimeout(\n        function () {\n          imageBlurProcessing(src,options).then((res) => {\n            const endTime = new Date();\n            this.processTime = endTime - startTime\n            this.isProcessing = false\n            this.afterImage = res\n          })\n        }.bind(this), \n        10\n      );      \n      \n    },\n    onFileChang(e) {\n   \n      let reader = new FileReader()\n      this.afterImage = null\n      reader.addEventListener(\n        'load',\n        function(event) {\n          try {\n            this.beforeImage = event.target.result\n            let image = new Image()\n            image.src = event.target.result\n            image.onload = () => {\n              console.log(image.width)\n              console.log()\n            }\n          } catch (error) {\n            console.error(error)\n          }        \n        }.bind(this)\n        )\n        reader.readAsDataURL(e.target.files[0])     \n      \n    }\n  }\n});\n"]}